

--[[
 Age of Steam control board by dragon12
  ]]--

--[[
  Helper tables from my library --
  ]]--

colorCodes = {
    White = {r=1, g=1, b=1},
    Brown = {r=0.443, g=0.231, b=0.09},
    Red = {r=0.856, g=0.1, b=0.094},
    Orange = {r=0.956, g=0.392, b=0.113},
    Yellow = {r=0.905, g=0.898, b=0.172},
    Green = {r=0.192, g=0.701, b=0.168},
    Teal = {r=0.129, g=0.694, b=0.607},
    Blue = {r=0.118, g=0.53, b=1},
    Purple = {r=0.627, g=0.125, b=0.941},
    Pink = {r=0.96, g=0.439, b=0.807},
    Grey = {r=0.5, g=0.5, b=0.5},
    Black = {r=0.25, g=0.25, b=0.25},
}


function hide(buttonParams_)
    local newParams = deepcopy(buttonParams_)
    newParams.label=''
    newParams.click_function='noop'
    newParams.position={0,-1,0}
    newParams.width=0
    newParams.height=0
    return newParams
end
--[[
  End helper tables from my library --
  ]]--


--Changes maximum character count for names
characterLimit = 14

-- current state of calculator
activePlayer = 0
activeAction = 0
isNegated = false
submittable = false

debug = true
printTriggeringPlayer=false
players = {}

function onSave()
    if players then
        if #players != 0 then
            local data_to_save = players
            saved_data = JSON.encode(data_to_save)
            return nil
        end
    end
end

loaded_data = {}

function onload(saved_data)
    if debug then
        if saved_data != nil then
            print("onload control board: ", dump(saved_data))
        end
    end

    -- if we've already been initialised then populate all of the things
    if saved_data != nil then
        loaded_data = JSON.decode(saved_data)
    else
        loaded_data = nil
    end
    loaded_data=nil


    if loaded_data == nil then
        print("no loaded data")
        -- nothing has been loaded; spawn our Init button and nothing else
        initFromClean()
    else
        currIndex = 0
        initButtonParams()

        print("loading data from previous")
        players = loaded_data

        -- create the init button so we hit spawnAll in the same state as usual
        createButton(buttonParams.hiddenInit)
        spawnAll()
    end
end

function initFromClean()
    currIndex = 0
    players = {}
    initButtonParams()
    createInitButton()
end

------ Set up all of the display stuff
defaultFontSize = 150

buttonYCoord = 0.2

-- col1: Name
-- col2: Action
-- col3: calculator
-- col4: submit (?)
colCoordsX = {
    -1.9, -- Name
    -0.2,   -- Action
    0.5,    -- Calculator
    2.3,    -- Display and Submit
}

-- player names
playerNameFontSize = defaultFontSize * 0.85
playerNameRow1CoordZ = -0.9 -- where is row 1 on the z axis
playerNameRowCoordZDelta = 0.38

-- actions
actionFontSize = defaultFontSize * 0.75
actionCoordX = colCoordsX[2]
actionRow1CoordZ = -0.7
actionRowCoordZDelta = 0.4
actionButtonWidth = 700
actionButtonHeight = 200
actionInactiveBackgroundColor = colorCodes.Grey
actionActiveBackgroundColor = colorCodes.Black
actionFont = colorCodes.White
actions = {
    {label='Issue Shares'},
    {label='Gain Income'},
    {label='Locomotive'},
    {label='Pay Cash'},
}

-- calculator
calculatorFontSize = defaultFontSize
calculatorCoordX = colCoordsX[3]
calculatorDisplayCoordX = colCoordsX[4]
calculatorCoordZ = 0.6
calculatorXDelta = 0.38
calculatorZDelta = -0.38
calculatorButtonWidth = 200
calculatorButtonHeight = 200
displayFontColor = colorCodes.Brown
submitButtonActiveFontColor = colorCodes.Red
submitButtonInactiveFontColor = colorCodes.Grey

-- other buttons
confirmsCoordZ = 0.6

endOfTurnCoordX = 4
endOfTurnCoordZ = 0

endOfTurnWidth = 800
endOfTurnHeight = 400

endOfTurnFontSize = defaultFontSize * 0.8
endOfTurnFontColor = colorCodes.Yellow
endOfTurnBackgroundColor = colorCodes.Red

endOfTurnYesCoordX = endOfTurnCoordX - 0.5
endOfTurnNoCoordX = endOfTurnCoordX + 0.5

endOfTurnConfirmsWidth = 400
endOfTurnConfirmsHeight = 200
resetAllConfirmsWidth = 400
resetAllConfirmsHeight = 200

resetAllCoordX = endOfTurnCoordX + 2
resetAllCoordZ = endOfTurnCoordZ
resetAllYesCoordX = resetAllCoordX - 0.4
resetAllNoCoordX = resetAllCoordX + 0.4

resetAllWidth = 800
resetAllHeight = 400

buttonPositionInit = {0, buttonYCoord, 0}

buttonPositionExecuteEndOfTurn = {endOfTurnCoordX,buttonYCoord,endOfTurnCoordZ}
buttonPositionEndOfTurnConfirmYes = {endOfTurnYesCoordX, buttonYCoord, confirmsCoordZ}
buttonPositionEndOfTurnConfirmNo = {endOfTurnNoCoordX, buttonYCoord, confirmsCoordZ}

buttonPositionResetAll = {resetAllCoordX,buttonYCoord,endOfTurnCoordZ}
buttonPositionResetAllConfirmYes = {resetAllYesCoordX, buttonYCoord, confirmsCoordZ}
buttonPositionResetAllConfirmNo = {resetAllNoCoordX, buttonYCoord, confirmsCoordZ}

buttonParams = {}

function initButtonParams()
    buttonParams.calcDisplay = {}
    buttonParams.submit = {}
    buttonParams.init = {label='Click Once Seated\nto populate players',
              click_function='initialiseAndSpawnAll', function_owner=self,
              position = buttonPositionInit,
              width=1500,height=500,
              font_size=defaultFontSize
          }
    buttonParams.resetAll = {label='Reset All', click_function='checkConfirmResetAll', function_owner=self,
                position=buttonPositionResetAll,
                width=resetAllWidth,height=resetAllHeight,
                font_size=defaultFontSize
            }

    buttonParams.executeEndOfTurn = {
        label='Execute\nEnd Of Turn',
        click_function='checkConfirmEndOfTurn', function_owner=self,
        position=buttonPositionExecuteEndOfTurn,
        width=endOfTurnWidth, height=endOfTurnHeight,
        font_size=endOfTurnFontSize, font_color=endOfTurnFontColor,
        color=endOfTurnBackgroundColor,
    }

    buttonParams.confirmEndOfTurnYes = {label='Confirm', click_function='confirmEndOfTurn', function_owner=self,
                            position=buttonPositionEndOfTurnConfirmYes,
                            width=endOfTurnConfirmsWidth, height=endOfTurnConfirmsHeight,
                            color=colorCodes.Red, font_color=colorCodes.Yellow, }

    buttonParams.confirmEndOfTurnNo = {label='Cancel', click_function='cancelEndOfTurn', function_owner=self,
                            position=buttonPositionEndOfTurnConfirmNo,
                            width=endOfTurnConfirmsWidth, height=endOfTurnConfirmsHeight,
                            color=colorCodes.Black, font_color=colorCodes.White, }

    buttonParams.confirmResetAllYes = {label='Really!', click_function='confirmResetAll', function_owner=self,
                            position=buttonPositionResetAllConfirmYes,
                            width=resetAllConfirmsWidth, height=resetAllConfirmsHeight,
                            color=colorCodes.Black, font_color=colorCodes.Red, }

    buttonParams.confirmResetAllNo = {label='Cancel', click_function='cancelResetAll', function_owner=self,
                            position=buttonPositionResetAllConfirmNo,
                            width=resetAllConfirmsWidth, height=resetAllConfirmsHeight,
                            color=colorCodes.Black, font_color=colorCodes.White, }

    buttonParams.hiddenInit = hide(buttonParams.init)
    buttonParams.hiddenResetAll = hide(buttonParams.resetAll)
    buttonParams.hiddenExecuteEndOfTurn = hide(buttonParams.executeEndOfTurn)
    buttonParams.hiddenConfirmEndOfTurnYes = hide(buttonParams.confirmEndOfTurnYes)
    buttonParams.hiddenConfirmEndOfTurnNo = hide(buttonParams.confirmEndOfTurnNo)
    buttonParams.hiddenConfirmResetAllYes = hide(buttonParams.confirmResetAllYes)
    buttonParams.hiddenConfirmResetAllNo = hide(buttonParams.confirmResetAllNo)
end

function initialisePlayers()
    -- create the player names
    local seatedColors = getSeatedPlayers()
    if debug then
        seatedColors = {'White', 'Purple', 'Blue', 'Green', 'Red', 'Yellow'} -- For debugging, fakes players at table
    end

    if #seatedColors == 0 then
        printToAll('Players must be seated in order for this tool to be used.', {1,0.5,0.5})
        return false
    end

    for index, playerColor in pairs(seatedColors) do
        players[index] = {
            color = playerColor,
            name = string.sub(getPlayerName(playerColor), 1, characterLimit)
        }
    end

    return true
end

function createInitButton()
    createButtonWithLinked(buttonParams.init, buttonParams.hiddenInit)
end

function initialiseAndSpawnAll()

    if not initialisePlayers() then
        return
    end

    -- hide itself by editing as the hidden version
    self.editButton(buttonParams.hiddenInit)

    spawnAll()
end


function spawnAll()

    -- initialise the other displayBoard
    local displayBoard = getObjectFromGUID(displayBoardGuid)
    displayBoard.call("ext_initAll")

    createPlayerColumn()
    createActionColumn()
    createCalculator()

    createOtherButtons()
end

function createOtherButtons()
    createButtonWithLinked(buttonParams.resetAll, buttonParams.hiddenResetAll)
    createButtonWithLinked(buttonParams.executeEndOfTurn, buttonParams.hiddenExecuteEndOfTurn)

    -- hidden versions of the various other things
    createButtonWithLinked(buttonParams.hiddenConfirmEndOfTurnYes, buttonParams.confirmEndOfTurnYes)
    createButtonWithLinked(buttonParams.hiddenConfirmEndOfTurnNo, buttonParams.confirmEndOfTurnNo)
    createButtonWithLinked(buttonParams.hiddenConfirmResetAllYes, buttonParams.confirmResetAllYes)
    createButtonWithLinked(buttonParams.hiddenConfirmResetAllNo, buttonParams.confirmResetAllNo)
end

function checkConfirmResetAll()
    buttonParams.resetAll.label = 'Reset All??'
    self.editButton(buttonParams.resetAll)
    self.editButton(buttonParams.confirmResetAllYes)
    self.editButton(buttonParams.confirmResetAllNo)
end

function confirmResetAll()
    -- remove all buttons
    local buttons = self.getButtons()

    for k,v in pairs(buttons) do
        self.removeButton(v.index)
    end

    local displayBoard = getObjectFromGUID(displayBoardGuid)
    displayBoard.call("ext_initFromClean")

    initFromClean()
end

function cancelResetAll()
    buttonParams.resetAll.label = 'Reset All'
    self.editButton(buttonParams.resetAll)
    self.editButton(buttonParams.hiddenConfirmResetAllYes)
    self.editButton(buttonParams.hiddenConfirmResetAllNo)
end

function checkConfirmEndOfTurn()
    buttonParams.executeEndOfTurn.label = 'Execute?'
    self.editButton(buttonParams.executeEndOfTurn)
    self.editButton(buttonParams.confirmEndOfTurnYes)
    self.editButton(buttonParams.confirmEndOfTurnNo)
end

function confirmEndOfTurn(obj, triggeringPlayer)
    -- do the end of turn upkeep
    doEndOfTurnUpkeep(obj, triggeringPlayer)

    -- then put the buttons back where they were
    restoreEndOfTurnButtons()
end

function cancelEndOfTurn()
    restoreEndOfTurnButtons()
end

function restoreEndOfTurnButtons()
    buttonParams.executeEndOfTurn.label = 'Execute\nEnd Of Turn'
    self.editButton(buttonParams.executeEndOfTurn)
    self.editButton(buttonParams.hiddenConfirmEndOfTurnYes)
    self.editButton(buttonParams.hiddenConfirmEndOfTurnNo)
end

-- execute the actions

-- todo tidy this up, dynamically find the display board
displayBoardGuid = '2d430f'

function doEndOfTurnUpkeep(obj, triggeringColor)
    local triggeringPlayer = getPlayerByColor(triggeringColor)
    broadcastToAll(string.format("End of turn upkeep starting, triggered by %s", triggeringPlayer), colorCodes.Purple)
end

function executeActionIssueShares(triggeringPlayer, activePlayer, number)

    local absolute = math.abs(number)
    local deltaMoney = number * 5

    local displayBoard = getObjectFromGUID(displayBoardGuid)

    -- get the current state
    local currentPlayerMoney = displayBoard.call("ext_getInfoMoney", {player=activePlayer})
    local currentSharesIssued = displayBoard.call("ext_getInfoShares", {player=activePlayer})

    local newPlayerMoney = currentPlayerMoney + deltaMoney
    local newPlayerSharesIssued = currentSharesIssued + number

    if newPlayerSharesIssued > 15 or newPlayerSharesIssued < 2 then
        printToAll(string.format("Invalid update: %d is not a valid number of issued shares", newPlayerSharesIssued), colorCodes.Red)
        return false
    end

    -- send call to the other board
    displayBoard.call("ext_executeUpdateMoney", {player=activePlayer,money=newPlayerMoney})
    displayBoard.call("ext_executeUpdateShares", {player=activePlayer,shares=newPlayerSharesIssued})

    local phrasing = ( absolute == 1 and " share" or "shares" )

    if number < 0 then
        if printTriggeringPlayer then
            broadcastToAll(string.format("WARN: %s recalls %d %s (now %d) for $%d (%s)",
                                activePlayer.name, absolute, phrasing, newPlayerSharesIssued,
                                deltaMoney, triggeringPlayer.name), colorCodes[activePlayer.color])
        else
            broadcastToAll(string.format("WARN: %s recalls %d %s (now %d) for $%d",
                                activePlayer.name, absolute, phrasing, newPlayerSharesIssued,
                                deltaMoney), colorCodes[activePlayer.color])
        end
    else
        if printTriggeringPlayer then
            broadcastToAll(string.format("%s issues %d %s (now %d) for $%d (%s)",
                                activePlayer.name, absolute, phrasing, newPlayerSharesIssued,
                                deltaMoney, triggeringPlayer.name), colorCodes[activePlayer.color])
        else
            broadcastToAll(string.format("%s issues %d %s (now %d) for $%d",
                                activePlayer.name, absolute, phrasing, newPlayerSharesIssued,
                                deltaMoney), colorCodes[activePlayer.color])
        end
    end

    return true
end

function executeActionGainIncome(triggeringPlayer, activePlayer, number)

    -- increase income by X
    -- can't go below 0
    -- can't change by more than 6
    if math.abs(number) > 6 then
        printToAll(string.format("Invalid update: income can't change by more than 6"), colorCodes.Red)
        return false
    end
    local displayBoard = getObjectFromGUID(displayBoardGuid)

    -- get the current state
    local currentPlayerIncome = displayBoard.call("ext_getInfoIncome", {player=activePlayer})

    local newPlayerIncome = currentPlayerIncome + number

    if newPlayerIncome < 0 then
        printToAll(string.format("Invalid update: %d would not be a valid income", newPlayerIncome), colorCodes.Red)
        return false
    end

    -- send call to the other board
    displayBoard.call("ext_executeUpdateIncome", {player=activePlayer,income=newPlayerIncome})

    if number < 0 then
        if printTriggeringPlayer then
            broadcastToAll(string.format("WARN: %s's income reduces by %d (now %d) (%s)",
                                activePlayer.name, math.abs(number), newPlayerIncome, triggeringPlayer.name),
                                colorCodes[activePlayer.color])
        else
            broadcastToAll(string.format("WARN: %s's income reduces by %d (now %d)",
                                activePlayer.name, math.abs(number), newPlayerIncome),
                                colorCodes[activePlayer.color])
        end

    else
        if printTriggeringPlayer then
            broadcastToAll(string.format("%s's income increases by %d (now %d) (%s)",
                                activePlayer.name, number, newPlayerIncome, triggeringPlayer.name),
                                colorCodes[activePlayer.color])
        else
            broadcastToAll(string.format("%s's income increases by %d (now %d)",
                                activePlayer.name, number, newPlayerIncome),
                                colorCodes[activePlayer.color])
        end
    end

    return true
end

function executeActionLocomotive(triggeringPlayer, activePlayer, number)

    -- increase locomotive by X
    -- can't go below 1
    -- can't go above 6
    if math.abs(number) != 1 then
        printToAll(string.format("Invalid update: locomotive can only change by 1"), colorCodes.Red)
        return false
    end

    local displayBoard = getObjectFromGUID(displayBoardGuid)

    -- get the current state
    local currentPlayerLoco = displayBoard.call("ext_getInfoLocomotive", {player=activePlayer})

    local newPlayerLoco = currentPlayerLoco + number

    if newPlayerLoco < 1 or newPlayerLoco > 6 then
        printToAll(string.format("Invalid update: %d would not be a valid locomotive", newPlayerLoco), colorCodes.Red)
        return false
    end

    -- send call to the other board
    displayBoard.call("ext_executeUpdateLocomotive", {player=activePlayer,locomotive=newPlayerLoco})

    if number < 0 then
        if printTriggeringPlayer then
            broadcastToAll(string.format("WARN: %s's locomotive reduces by %d (now %d) (%s)",
                                activePlayer.name, math.abs(number), newPlayerLoco, triggeringPlayer.name),
                                colorCodes[activePlayer.color])
        else
            broadcastToAll(string.format("WARN: %s's locomotive reduces by %d (now %d)",
                                activePlayer.name, math.abs(number), newPlayerLoco),
                                colorCodes[activePlayer.color])
        end

    else
        if printTriggeringPlayer then
            broadcastToAll(string.format("%s's locomotive increases by %d (now %d) (%s)",
                                activePlayer.name, number, newPlayerLoco, triggeringPlayer.name),
                                colorCodes[activePlayer.color])
        else
            broadcastToAll(string.format("%s's locomotive increases by %d (now %d)",
                                activePlayer.name, number, newPlayerLoco),
                                colorCodes[activePlayer.color])
        end
    end

    return true
end

function executeActionPayCash(triggeringPlayer, activePlayer, number)

    -- *decrease* cash by X
    -- can't go below 0
    number = -number

    local displayBoard = getObjectFromGUID(displayBoardGuid)

    -- get the current state
    local currentPlayerCash = displayBoard.call("ext_getInfoMoney", {player=activePlayer})

    local newPlayerCash = currentPlayerCash + number

    if newPlayerCash < 0 then
        printToAll(string.format("Invalid update: %d would not be a valid cash total", newPlayerCash), colorCodes.Red)
        return false
    end

    -- send call to the other board
    displayBoard.call("ext_executeUpdateMoney", {player=activePlayer,money=newPlayerCash})

    if number > 0 then
        if printTriggeringPlayer then
            broadcastToAll(string.format("WARN: %s's cash increases by $%d (now %d) (%s)",
                                activePlayer.name, number, newPlayerCash, triggeringPlayer.name),
                                colorCodes[activePlayer.color])
        else
            broadcastToAll(string.format("WARN: %s's cash increases by $%d (now %d)",
                                activePlayer.name, number, newPlayerCash),
                                colorCodes[activePlayer.color])
        end

    else
        if printTriggeringPlayer then
            broadcastToAll(string.format("%s paid $%d (remaining $%d) (%s)",
                                activePlayer.name, math.abs(number), newPlayerCash, triggeringPlayer.name),
                                colorCodes[activePlayer.color])
        else
            broadcastToAll(string.format("%s paid $%d (remaining $%d)",
                                activePlayer.name, math.abs(number), newPlayerCash),
                                colorCodes[activePlayer.color])
        end
    end

    return true
end

function executeCurrentAction(triggeringColor)
    local action = actions[activeAction]
    local suffix = string.gsub(action.label, ' ', '')

    local executeFunctionName = 'executeAction' .. suffix

    local triggeringPlayer = getPlayerByColor(triggeringColor)
    local currentPlayer = players[activePlayer]
    local currentDisplayValue = tonumber(getCurrentDisplayValue())

    if currentDisplayValue == 0 then
        printToAll("Invalid update: must be non-zero", colorCodes.Red)
        return false
    end

    return _G[executeFunctionName](triggeringPlayer, currentPlayer, currentDisplayValue)
end

-- end execution of actions

function calcNumberClicked(obj, color, newNum)
    local currentDisplay = buttonParams.calcDisplay.label
    buttonParams.calcDisplay.label = currentDisplay .. newNum
    self.editButton(buttonParams.calcDisplay)
    checkForSubmittableChange()
end

function getCurrentDisplayValue()
    local currentDisplay = buttonParams.calcDisplay.label
    if currentDisplay == '' or currentDisplay == '-' then
        return 0
    end

    return tonumber(currentDisplay)
end

function calcClickNegate(obj, color)

    local currentDisplay = buttonParams.calcDisplay.label

    if isNegated then
        buttonParams.calcDisplay.label = string.sub(currentDisplay, 2)
    else
        buttonParams.calcDisplay.label = '-' .. currentDisplay
    end

    self.editButton(buttonParams.calcDisplay)
    isNegated = not isNegated
    checkForSubmittableChange()
end

function clearDisplay()
    buttonParams.calcDisplay.label = ''
    self.editButton(buttonParams.calcDisplay)
    checkForSubmittableChange()
end

function calcClickClear(obj, color)
    clearDisplay()
end

function checkForSubmittableChange()
    local newSubmittable = isSubmittable()

    if newSubmittable != submittable then
        if newSubmittable then
            buttonParams.submit.font_color = submitButtonActiveFontColor
        else
            buttonParams.submit.font_color = submitButtonInactiveFontColor
        end

        self.editButton({index = buttonParams.submit.index, font_color=buttonParams.submit.font_color})

        submittable = newSubmittable
    end
end

function isSubmittable()
    if activePlayer == 0 then return false end
    if activeAction == 0 then return false end

    return getCurrentDisplayValue() != 0
end

function displayClick(obj, color)
    printToColor("Don't be silly, you can't click the display", color, colorCodes.Orange)
end

function submitClick(obj, color)
    if not submittable then
        local message = "Can't submit: "
        if activePlayer == 0 then
            message = message .. "No player selected"
        elseif activeAction == 0 then
            message = message .. "No action selected"
        elseif getCurrentDisplayValue() == 0 then
            message = message .. "No value entered"
        else
            message = message .. "We're very confused"
        end

        printToColor(message, color, colorCodes.Red)

        return
    end

    -- execute the action
    if executeCurrentAction(color) then
        clearControls()
    else
        print("action failed")
    end
end

function clearControls()
    activeAction = 0
    activePlayer = 0
    isNegated = false

    clearDisplay()
    refreshActions()
    refreshPlayerNames()
end

function createCalculator()
    local leftmostX = calculatorCoordX
    local bottomZ = calculatorCoordZ

    local deltaX = calculatorXDelta
    local deltaZ = calculatorZDelta

    -- creating a 3x4 grid of buttons for calculator
    -- bottom row is -, 0, clr
    -- numbers 1-9 form the top 3x3 grid
    local numRows = 4
    local numCols = 3

    function getXZ(index)
        local row = math.floor((index - 1) / numCols)
        local col = index - (row * numCols)

        local xCoord = leftmostX + ( col * deltaX )
        local zCoord = bottomZ + ( row * deltaZ )

        return xCoord, zCoord
    end

    for i=0,9 do
        -- create a new global function
        _G['calcClick' .. i] = function(obj, col)
            -- that simply calls our real target function
            calcNumberClicked(obj, col, i)
        end
    end

    local xCoord
    local zCoord

    for i=1,12 do

        xCoord, zCoord = getXZ(i)

        if i == 1 then
            params = {label='-', click_function='calcClickNegate', function_owner=self,
                      position = {xCoord, buttonYCoord, zCoord},
                      width=calculatorButtonWidth, height=calculatorButtonHeight,
                      font_size=calculatorFontSize }

            createButton(params)
        elseif i == 2 then

            params = {label='0', click_function='calcClick0', function_owner=self,
                      position = {xCoord, buttonYCoord, zCoord},
                      width=calculatorButtonWidth, height=calculatorButtonHeight,
                      font_size=calculatorFontSize }

            createButton(params)
        elseif i == 3 then

            params = {label='CLR', click_function='calcClickClear', function_owner=self,
                      position = {xCoord, buttonYCoord, zCoord},
                      width=calculatorButtonWidth, height=calculatorButtonHeight,
                      font_size=calculatorFontSize * 0.75 }

            createButton(params)
        else
            num = i-3

            params = {label=num, click_function='calcClick'..num, function_owner=self,
                      position = {xCoord, buttonYCoord, zCoord},
                      width=calculatorButtonWidth, height=calculatorButtonHeight,
                      font_size=calculatorFontSize }

            createButton(params)
        end
    end

    -- create the display and submit buttons -- which are in the next column
    xCoord = calculatorDisplayCoordX
    _, zCoord = getXZ(9)

    buttonParams['calcDisplay'] = {label='', click_function='displayClick', function_owner=self,
              position = {xCoord, buttonYCoord, zCoord},
              width=calculatorButtonWidth * 2, height=calculatorButtonHeight,
              font_color=displayFontColor,
              font_size=calculatorFontSize }

    createButton(buttonParams['calcDisplay'])

    _, zCoord = getXZ(6)

    buttonParams['submit'] = {label='Submit', click_function='submitClick', function_owner=self,
              position = {xCoord, buttonYCoord, zCoord},
              width=calculatorButtonWidth * 2, height=calculatorButtonHeight,
              font_color=submitButtonInactiveFontColor,
              font_size=calculatorFontSize * 0.75 }

    createButton(buttonParams['submit'])
end

function createPlayerColumn()
    playerInactiveBackgroundColor = colorCodes['Grey']
    playerActiveBackgroundColor = colorCodes['Black']

    -- first column: six rows of player names
    local playersCoords = {}
    for i=1,6 do
        playersCoords[i] = {colCoordsX[1], buttonYCoord, playerNameRow1CoordZ + (playerNameRowCoordZDelta * (i-1) )}
    end

    -- populate the player names
    for i, v in pairs(players) do
        -- create a new global function
        _G['nameClickFunction' .. i] = function(obj, col)
           -- that simply calls our real target function
           setActivePlayerName(obj, col, i)
        end

        params = {label=v.name, click_function='nameClickFunction' .. i, function_owner=self,
                  position = playersCoords[i], width=800, height=200,
                  color = playerInactiveBackgroundColor,
                  font_color = colorCodes[v.color],
                  font_size=playerNameFontSize }
        players[i]['nameButton'] = createButton(params)
    end
end

function setActivePlayerName(obj, col, i)
    -- loop over all of the players, set all to default background and make one active
    activePlayer = i

    refreshPlayerNames()
end

function refreshPlayerNames()
    --printAllButtons()

    for index, player in ipairs(players) do
        --print("checking player ", dump(player))
        if index == activePlayer then
            self.editButton({index = player['nameButton'], color=playerActiveBackgroundColor})
        else
            self.editButton({index = player['nameButton'], color=playerInactiveBackgroundColor})
        end
    end

    checkForSubmittableChange()
end

-- actions
function createActionColumn()
    for i, v in ipairs(actions) do
        _G['actionClickFunction' .. i] = function(obj, col)
            setActiveAction(obj, col, i)
        end

        local zCoord = actionRow1CoordZ + ( (i - 1) * actionRowCoordZDelta )
        params = {label=v.label, click_function='actionClickFunction' .. i, function_owner=self,
                  position = {actionCoordX, buttonYCoord, zCoord},
                  width=actionButtonWidth, height=actionButtonHeight,
                  color = actionInactiveBackgroundColor,
                  font_color = actionFont,
                  font_size=actionFontSize }

        actions[i]['button'] = createButton(params)
    end
end

function setActiveAction(obj, col, i)

    -- loop over all of the actions, set all to default background and make one active
    activeAction = i

    refreshActions()
end

function refreshActions()
    --printAllButtons()

    for index, action in ipairs(actions) do
        if index == activeAction then
            self.editButton({index = action['button'], color=actionActiveBackgroundColor})
        else
            self.editButton({index = action['button'], color=actionInactiveBackgroundColor})
        end
    end

    checkForSubmittableChange()
end

--[[
  Helper methods from my library --
  ]]--

function getPlayerName(color)
    playerName = Player[color].steam_name
    if playerName == nil then
        return color
    else
        return playerName
    end
end

function dump(o)
   if type(o) == 'table' then
      local s = '{ '
      for k,v in pairs(o) do
         if type(k) ~= 'number' then k = '"'..k..'"' end
         s = s .. '['..k..'] = ' .. dump(v) .. ','
      end
      return s .. '} '
   else
      return tostring(o)
   end
end

function createButtonWithLinked(params, linked)
    local id = createButton(params)
    linked.index = id
    return id
end

function createButton(params)
    params.index = currIndex
    params.created = true

    self.createButton(params)

    currIndex = currIndex + 1
    return params.index
end


function printAllButtons()
    allButtons = self.getButtons()

    for i, t in pairs(allButtons) do
        print ("button, i=",i,", t=", t)
        for k,v in pairs(t) do
            print("    k=", k, ", v=", v)
        end
    end
end

function noop()
end


function getPlayerByColor(color)
    for _, player in pairs(players) do
        if player.color == color then
            return player
        end
    end
    return nil
end

function deepcopy(orig)
    local orig_type = type(orig)
    local copy
    if orig_type == 'table' then
        copy = {}
        for orig_key, orig_value in next, orig, nil do
            copy[deepcopy(orig_key)] = deepcopy(orig_value)
        end
        setmetatable(copy, deepcopy(getmetatable(orig)))
    else -- number, string, boolean, etc
        copy = orig
    end
    return copy
end
--[[
  End helper methods from my library --
  ]]--
